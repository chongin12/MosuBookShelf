package com.example.mosubookshelfimport android.os.Bundleimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.activity.enableEdgeToEdgeimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.*import androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.rounded.Searchimport androidx.compose.material.icons.rounded.ShoppingCartimport androidx.compose.material3.*import androidx.compose.runtime.*import androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.graphics.vector.ImageVectorimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport com.example.mosubookshelf.ui.theme.MosuBookShelfThemeclass MainActivity : ComponentActivity() {    private val bottomNavigationItems = BottomNavigationItemType.entries    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        enableEdgeToEdge()        setContent {            MosuBookShelfTheme {                val selectedItemState = remember { mutableStateOf(BottomNavigationItemType.NEW) }                Scaffold(modifier = Modifier.fillMaxSize(), bottomBar = {                    BottomAppBar {                        BottomNavigationBar(bottomNavigationItems, selectedItemState)                    }                }) { innerPadding ->                    Box(                        modifier = Modifier.padding(innerPadding),                        contentAlignment = Alignment.Center                    ) {                        when (selectedItemState.value) {                            BottomNavigationItemType.NEW -> NewBooksScreen()                            BottomNavigationItemType.SEARCH -> SearchBooksScreen()                        }                    }                }            }        }    }}@Composablefun BottomNavigationBar(    navigationItems: List<BottomNavigationItemType>,    selectedNavigationItemState: MutableState<BottomNavigationItemType>,    modifier: Modifier = Modifier) {    Row(        modifier = Modifier.fillMaxWidth(),        horizontalArrangement = Arrangement.SpaceAround    ) {        navigationItems.forEach { item ->            BottomNavigationItemTypeView(                item,                selectedNavigationItemState.value == item,                Modifier.clickable { selectedNavigationItemState.value = item }            )        }    }}@Composablefun BottomNavigationItemTypeView(type: BottomNavigationItemType, isSelected: Boolean, modifier: Modifier = Modifier) {    Column(        horizontalAlignment = Alignment.CenterHorizontally,        modifier = modifier            .padding(16.dp)    ) {        Icon(type.item.icon, "navigationIcon")        Spacer(modifier = Modifier.height(2.dp))        Text(            text = type.item.title,            color = if (isSelected) Color.Black else Color.Gray        )    }}@Preview(showBackground = true)@Composablefun NewBooksScreenPreview() {    val bottomNavigationItems = BottomNavigationItemType.entries    val selectedItemState = remember { mutableStateOf(BottomNavigationItemType.NEW) }    BottomNavigationBar(bottomNavigationItems, selectedItemState)}@Composablefun NewBooksScreen(modifier: Modifier = Modifier) {    Text(        text = "NewBooks screen",        modifier = modifier,    )}@Composablefun SearchBooksScreen(modifier: Modifier = Modifier) {    Text(        text = "SearchBooks screen",        modifier = modifier,    )}enum class BottomNavigationItemType(val item: BottomNavigationItem) {    NEW(BottomNavigationItem("New!", Icons.Rounded.ShoppingCart)),    SEARCH(BottomNavigationItem("Search", Icons.Rounded.Search))}data class BottomNavigationItem(val title: String, val icon: ImageVector)